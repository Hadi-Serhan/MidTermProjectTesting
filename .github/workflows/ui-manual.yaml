# .github/workflows/ui-manual.yaml
name: UI Tests (manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Where to run UI tests'
        required: true
        type: choice
        default: 'aws'
        options: [aws, local]
      base_url:
        description: 'Override VAULTWARDEN_URL (optional)'
        required: false
      headless:
        description: 'Run headless'
        required: true
        type: choice
        default: 'true'
        options: ['true','false']

jobs:
  ui-aws:
    if: ${{ inputs.environment == 'aws' }}
    runs-on: ubuntu-latest
    env:
      VAULTWARDEN_URL: ${{ inputs.base_url != '' && inputs.base_url || secrets.VW_BASE_URL }}
      VW_EMAIL:        ${{ secrets.VW_EMAIL }}
      VW_PASSWORD:     ${{ secrets.VW_PASSWORD }}
      HEADLESS:        ${{ inputs.headless }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
      - uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html
      - name: Run UI tests
        run: |
          mkdir -p reports
          xvfb-run -a python -m pytest -q tests/ui \
            --maxfail=1 \
            --html=reports/ui.html --self-contained-html \
            --junitxml=reports/ui-junit.xml
      - uses: actions/upload-artifact@v4
        with:
          name: ui-reports
          path: reports/*

  ui-local:
    if: ${{ inputs.environment == 'local' }}
    runs-on: ubuntu-latest
    services:
      vaultwarden:
        image: vaultwarden/server:latest
        ports: [ "3000:80" ]
        env:
          SIGNUPS_ALLOWED: "true"
          WEBSOCKET_ENABLED: "true"
          I_REALLY_WANT_VOLATILE_STORAGE: "true"
    env:
      VAULTWARDEN_URL: ${{ inputs.base_url != '' && inputs.base_url || 'http://localhost:3000' }}
      # You must set these *inputs* or *secrets* to a test user that
      # your test will create via the UI (see notes below), otherwise login will fail.
      VW_EMAIL:    ${{ secrets.VW_EMAIL }}
      VW_PASSWORD: ${{ secrets.VW_PASSWORD }}
      HEADLESS:    ${{ inputs.headless }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
      - uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html
      - name: Wait for Vaultwarden
        run: |
          for i in {1..90}; do curl -fsS "${VAULTWARDEN_URL}/alive" && exit 0; sleep 2; done
          echo "Vaultwarden not up" >&2; exit 1
      - name: Run UI tests
        run: |
          mkdir -p reports
          xvfb-run -a python -m pytest -q tests/ui \
            --maxfail=1 \
            --html=reports/ui.html --self-contained-html \
            --junitxml=reports/ui-junit.xml
      - uses: actions/upload-artifact@v4
        with:
          name: ui-reports
          path: reports/*
