name: UI Tests (manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Where to run UI tests"
        required: true
        type: choice
        default: aws
        options: [aws, local]
      base_url:
        description: "Override VAULTWARDEN_URL (optional)"
        required: false
      ui_email:
        description: "UI email (optional if secrets are set)"
        required: false
      ui_password:
        description: "UI password (optional if secrets are set)"
        required: false
      headless:
        description: "Run headless"
        required: true
        type: choice
        default: "true"
        options: ["true","false"]

jobs:
  ui-aws:
    if: ${{ inputs.environment == 'aws' }}
    runs-on: ubuntu-latest
    env:
      # Prefer manual input; else secret; else fail in sanity check
      VAULTWARDEN_URL: ${{ inputs.base_url != '' && inputs.base_url || secrets.VW_BASE_URL }}
      VW_EMAIL:        ${{ inputs.ui_email != '' && inputs.ui_email || secrets.VW_EMAIL }}
      VW_PASSWORD:     ${{ inputs.ui_password != '' && inputs.ui_password || secrets.VW_PASSWORD }}
      HEADLESS:        ${{ inputs.headless }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xvfb
      - uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html

      - name: Sanity check env
        run: |
          if [ -z "${VAULTWARDEN_URL}" ]; then
            echo "VAULTWARDEN_URL is empty. Provide base_url input or set VW_BASE_URL secret." >&2
            exit 1
          fi
          if [ -z "${VW_EMAIL}" ] || [ -z "${VW_PASSWORD}" ]; then
            echo "VW_EMAIL/VW_PASSWORD missing. Provide ui_email/ui_password inputs or set secrets." >&2
            exit 1
          fi

      - name: Wait for target /alive
        run: |
          URL="${VAULTWARDEN_URL%/}/alive?ngrok-skip-browser-warning=true"
          for i in {1..120}; do
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" -L \
                    -H "ngrok-skip-browser-warning: true" \
                    -A "vw-ci-bot/1.0" \
                    "$URL")
            if [ "$CODE" -eq 200 ]; then
              echo "Target is up: ${VAULTWARDEN_URL}"
              exit 0
            fi
            sleep 2
          done
          echo "Target did not become healthy in time: ${VAULTWARDEN_URL}" >&2
          # Debug: show real response
          curl -i -L -H "ngrok-skip-browser-warning: true" -A "vw-ci-bot/1.0" "$URL" || true
          exit 1

      - name: Run UI tests
        run: |
          mkdir -p reports
          xvfb-run -a python -m pytest -q tests/ui \
            --maxfail=1 \
            --html=reports/ui.html --self-contained-html \
            --junitxml=reports/ui-junit.xml

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-reports-aws
          path: reports/*

  ui-local:
    if: ${{ inputs.environment == 'local' }}
    runs-on: ubuntu-latest

    services:
      vaultwarden:
        image: vaultwarden/server:latest
        ports:
          - "3000:80"
        env:
          SIGNUPS_ALLOWED: "true"
          WEBSOCKET_ENABLED: "true"
          I_REALLY_WANT_VOLATILE_STORAGE: "true"
        options: >-
          --health-cmd "curl -fsS http://localhost:80/alive || exit 1"
          --health-interval=5s
          --health-retries=30
          --health-timeout=3s
          --health-start-period=5s

    env:
      VAULTWARDEN_URL: ${{ inputs.base_url != '' && inputs.base_url || 'http://localhost:3000' }}
      VW_EMAIL:        ${{ inputs.ui_email != '' && inputs.ui_email || secrets.VW_EMAIL }}
      VW_PASSWORD:     ${{ inputs.ui_password != '' && inputs.ui_password || secrets.VW_PASSWORD }}
      HEADLESS:        ${{ inputs.headless }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xvfb
      - uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html

      - name: Wait for Vaultwarden (local)
        run: |
          for i in {1..90}; do
            if curl -fsS "${VAULTWARDEN_URL}/alive" >/dev/null; then
              echo "Local Vaultwarden is up."
              exit 0
            fi
            sleep 2
          done
          echo "Local Vaultwarden did not become healthy in time" >&2
          docker ps -a || true
          exit 1

      - name: Sanity check creds
        run: |
          if [ -z "${VW_EMAIL}" ] || [ -z "${VW_PASSWORD}" ]; then
            echo "VW_EMAIL/VW_PASSWORD missing. Provide ui_email/ui_password inputs or set secrets." >&2
            exit 1
          fi

      - name: Run UI tests
        run: |
          mkdir -p reports
          xvfb-run -a python -m pytest -q tests/ui \
            --maxfail=1 \
            --html=reports/ui.html --self-contained-html \
            --junitxml=reports/ui-junit.xml

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-reports-local
          path: reports/*
