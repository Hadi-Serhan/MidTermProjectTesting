name: UI Tests (manual)

on:
  workflow_dispatch:
    inputs:
      base_url:
        required: true
      ui_email:
        description: "UI email"
        required: false
      ui_password:
        description: "UI password"
        required: false
      headless:
        description: "Run headless"
        required: true
        type: choice
        default: "true"
        options: ["true","false"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    env:
      VAULTWARDEN_URL: ${{ inputs.base_url }}
      VW_EMAIL:        ${{ inputs.ui_email != '' && inputs.ui_email || secrets.VW_EMAIL }}
      VW_PASSWORD:     ${{ inputs.ui_password != '' && inputs.ui_password || secrets.VW_PASSWORD }}
      HEADLESS:        ${{ inputs.headless }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xvfb

      - uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html allure-pytest

      - name: Sanity check env
        run: |
          if [ -z "${VAULTWARDEN_URL}" ]; then
            echo "VAULTWARDEN_URL is empty. Provide base_url input." >&2
            exit 1
          fi
          if [ -z "${VW_EMAIL}" ] || [ -z "${VW_PASSWORD}" ]; then
            echo "VW_EMAIL/VW_PASSWORD missing. Provide inputs or set secrets." >&2
            exit 1
          fi

      - name: Wait for target /alive (ngrok-aware)
        run: |
          set -euo pipefail
          URL="${VAULTWARDEN_URL%/}/alive?ngrok-skip-browser-warning=true"
          echo "Probing: $URL"
          for i in {1..120}; do
            CODE=$(curl -sS -L \
              -H "ngrok-skip-browser-warning: true" \
              -A "vw-ci-bot/1.0" \
              -o resp.html -w "%{http_code}" \
              "$URL" || echo 000)
            if [ "$CODE" = "200" ]; then
              echo "Target is up (200): ${VAULTWARDEN_URL}"
              rm -f resp.html; exit 0
            fi
            if [ "$CODE" = "400" ] && grep -qi "ngrok" resp.html; then
              echo "Ngrok interstitial detected â€” treating as UP."
              rm -f resp.html; exit 0
            fi
            sleep 2
          done
          echo "Target did not become healthy in time: ${VAULTWARDEN_URL}" >&2
          sed -n '1,120p' resp.html || true
          rm -f resp.html
          exit 1
      
      - name: OAuth token smoke test (uses GitHub Secrets)
        env:
          VAULTWARDEN_URL: ${{ env.VAULTWARDEN_URL }}
          CLIENT_ID:       ${{ secrets.VW_CLIENT_ID }}
          CLIENT_SECRET:   ${{ secrets.VW_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          # Request a client_credentials token to verify the tunnel + creds work
          curl -sS -L \
            -H "ngrok-skip-browser-warning: true" \
            -A "vw-ci-bot/1.0" \
            --data-urlencode "grant_type=client_credentials" \
            --data-urlencode "scope=api" \
            --data-urlencode "client_id=${CLIENT_ID}" \
            --data-urlencode "client_secret=${CLIENT_SECRET}" \
            "${VAULTWARDEN_URL%/}/identity/connect/token" \
            | jq -e '.access_token' >/dev/null

      - name: Run UI tests (with Allure results)
        run: |
          mkdir -p reports allure-results
          xvfb-run -a python -m pytest -q tests/ui \
            --maxfail=1 \
            --alluredir=allure-results \
            --html=reports/ui.html --self-contained-html \
            --junitxml=reports/ui-junit.xml

      - name: Upload raw reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-reports
          path: |
            reports/*
            allure-results/*

      # Build Allure static site
      - name: Set up Java (for Allure CLI)
        if: always()
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Allure CLI
        if: always()
        run: npm i -g allure-commandline --no-audit --no-fund

      - name: Generate Allure HTML
        if: always()
        run: |
          allure generate allure-results --clean -o allure-report
          test -f allure-report/index.html
          touch allure-report/.nojekyll   # ensure assets are served

      - name: Upload Pages artifact (Allure HTML)
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

  deploy-pages:
    # deploy even if tests failed, so you can inspect the report
    if: always()
    needs: ui-tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          enablement: true   # auto-enable "GitHub Actions" as the Pages source

      - name: Allure URL
        env:
          ALLURE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          echo "Allure report: ${ALLURE_URL}"
          echo "::notice title=Allure Report::${ALLURE_URL}"

####