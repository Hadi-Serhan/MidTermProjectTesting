name: CI

on:
  push:
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      vaultwarden:
        image: vaultwarden/server:latest
        ports:
          - 3000:80
        env:
          SIGNUPS_ALLOWED: "true"   # allows creating a user if you later automate it
          WEBSOCKET_ENABLED: "true"
        options: >-
          --health-cmd "curl -fsS http://localhost:80/alive || exit 1"
          --health-interval=5s
          --health-retries=20
          --health-timeout=2s
          --health-start-period=5s

    env:
      # Local service container URL for smoke tests
      VAULTWARDEN_URL: "http://localhost:3000"

      # Optional external instance (AWS) secrets
      VW_BASE_URL: ${{ secrets.VW_BASE_URL }}
      CLIENT_ID:   ${{ secrets.VW_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.VW_CLIENT_SECRET }}

      # Optional UI creds if you want to run UI against AWS
      VW_EMAIL: ${{ secrets.VW_EMAIL }}
      VW_PASSWORD: ${{ secrets.VW_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xvfb

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Vaultwarden (local service)
        run: |
          for i in {1..60}; do
            curl -fsS "${VAULTWARDEN_URL}/alive" >/dev/null && exit 0
            sleep 2
          done
          echo "Vaultwarden did not become healthy in time" >&2
          exit 1

      # ---- SMOKE TESTS against local service container ----
      - name: Run health + version tests (local)
        run: |
          python -m pytest -q tests/api -k "health or version" --maxfail=1

      # ---- AUTHENTICATED API TESTS against AWS (optional) ----
      - name: Run authenticated API tests (AWS)
        if: ${{ env.CLIENT_ID != '' && env.CLIENT_SECRET != '' && env.VW_BASE_URL != '' }}
        env:
          VAULTWARDEN_URL: ${{ env.VW_BASE_URL }}
        run: |
          python -m pytest -q tests/api -k "not health and not version" --maxfail=1

      # ---- UI TESTS (optional) ----
      # Option A: Run UI against AWS (needs publicly reachable VW_BASE_URL and VW_EMAIL/PASSWORD secrets)
      - name: Run UI tests headlessly (AWS)
        if: ${{ env.VW_BASE_URL != '' && env.VW_EMAIL != '' && env.VW_PASSWORD != '' }}
        env:
          VAULTWARDEN_URL: ${{ env.VW_BASE_URL }}
        run: |
          xvfb-run -a python -m pytest -q tests/ui --maxfail=1
