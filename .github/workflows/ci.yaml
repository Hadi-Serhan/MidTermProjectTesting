name: CI

on:
  push:
  pull_request:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      vaultwarden:
        image: vaultwarden/server:latest
        ports:
          - 3000:80
        env:
          SIGNUPS_ALLOWED: "true"
          WEBSOCKET_ENABLED: "true"
          I_REALLY_WANT_VOLATILE_STORAGE: "true"

    env:
      VAULTWARDEN_URL: "http://localhost:3000"
      # kept for convenience (unused now that AWS steps are removed)
      VW_BASE_URL:   ${{ secrets.VW_BASE_URL }}
      CLIENT_ID:     ${{ secrets.VW_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.VW_CLIENT_SECRET }}
      VW_EMAIL:      ${{ secrets.VW_EMAIL }}
      VW_PASSWORD:   ${{ secrets.VW_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xvfb

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-html

      - name: Wait for Vaultwarden (local service)
        run: |
          for i in {1..120}; do
            if curl -fsS "${VAULTWARDEN_URL}/alive" >/dev/null; then
              echo "Vaultwarden is up."
              exit 0
            fi
            sleep 2
          done
          echo "Vaultwarden did not become healthy in time" >&2
          docker ps -a || true
          ID=$(docker ps -aqf "publish=3000")
          if [ -n "$ID" ]; then docker logs "$ID" || true; fi
          exit 1

      - name: Run health + version tests (local) with reports
        run: |
          mkdir -p reports
          python -m pytest tests/api \
            -k "health or version" \
            --maxfail=1 \
            --junitxml=reports/junit-local.xml \
            --html=reports/report-local.html --self-contained-html \
            -q

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/*

      - name: Publish JUnit results to PR
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "reports/*.xml"

      - name: Dump Vaultwarden logs on failure
        if: failure()
        run: |
          docker ps -a || true
          ID=$(docker ps -aqf "publish=3000")
          if [ -n "$ID" ]; then docker logs "$ID" || true; fi
